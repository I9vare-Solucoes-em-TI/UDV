unit CentroCustoPersonalizado;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, CadastroAuxSimplificado, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  Vcl.Menus, Data.FMTBcd, Data.DB, Datasnap.DBClient, Datasnap.Provider,
  Data.SqlExpr, Vcl.StdCtrls, cxButtons, Vcl.ExtCtrls, cxLabel, cxStyles,
  cxCustomData, cxFilter, cxData, cxDataStorage, cxNavigator, cxDBData,
  cxCurrencyEdit, cxTextEdit, cxMaskEdit, cxDropDownEdit, cxLookupEdit,
  cxDBLookupEdit, cxDBLookupComboBox, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid,
  DbxDevartInterBase, SimpleDS;

type
  TfrmCentroCustoPersonalizado = class(TfrmCadastroAuxSimplificado)
    Panel3: TPanel;
    cxLabel5: TcxLabel;
    cxLabel1: TcxLabel;
    lcbCentroCusto: TcxLookupComboBox;
    edtPorcentagem: TcxCurrencyEdit;
    btnAdicionarCentro: TcxButton;
    btnExcluirItem: TcxButton;
    sqlCentroCustoItens: TSimpleDataSet;
    sqlCentroCustoItensDESCRICAO: TStringField;
    sqlCentroCustoItensCENTRO_CUSTO_ID: TFMTBCDField;
    sqlCentroCustoItensBALANCETE_GRUPO_ID: TFMTBCDField;
    dtsCentroCustoItens: TDataSource;
    cxGrid1: TcxGrid;
    cxGridDBTableView5: TcxGridDBTableView;
    cxGridDBTableView5Column1: TcxGridDBColumn;
    cxGridDBTableView5Column2: TcxGridDBColumn;
    cxGridLevel5: TcxGridLevel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure edtPorcentagemKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnAdicionarCentroClick(Sender: TObject);
    procedure btnExcluirItemClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure sqlCentroCustoItensAfterScroll(DataSet: TDataSet);
    procedure btnConfirmarClick(Sender: TObject);
  private
    procedure VerificarCentroCusto(vpCentroCustoId : Integer; vpPercentual : Currency);
  public
    { Public declarations }
  end;

var
  frmCentroCustoPersonalizado: TfrmCentroCustoPersonalizado;

implementation

uses
  Lookup_Contabil, Lookup, Rotinas, Controles, LookupFinanceiro;

{$R *.dfm}

procedure TfrmCentroCustoPersonalizado.btnAdicionarCentroClick(
  Sender: TObject);

begin
  inherited;
  VerificarPreenchimentoLCX_TX(lcbCentroCusto.Text,'Centro de Custos', lcbCentroCusto);
  VerificarCentroCusto(lcbCentroCusto.EditValue, edtPorcentagem.EditValue);

  if edtPorcentagem.EditValue <= 0 then
  begin
    Application.MessageBox('Porcentagem Inválida!!!', 'Atenção', mb_Ok + MB_ICONEXCLAMATION);
    edtPorcentagem.SetFocus;
    exit;
  end;

  with dtmLookupFinanceiro do
  begin
    ClientCentroCustos.Insert;
    ClientCentroCustosCENTRO_CUSTO_ID.AsInteger := lcbCentroCusto.EditValue;
    ClientCentroCustosPORCENTAGEM.AsCurrency    := edtPorcentagem.EditValue;
    ClientCentroCustosSITUACAO.AsString         := '1';
    ClientCentroCustos.Post;
  end;
  lcbCentroCusto.SetFocus;

  lcbCentroCusto.EditValue := null;
  edtPorcentagem.EditValue := 0;
end;

procedure TfrmCentroCustoPersonalizado.btnCancelarClick(Sender: TObject);
begin
  vgCentroCusto.Cancelado := True;
  inherited;
end;

procedure TfrmCentroCustoPersonalizado.btnConfirmarClick(Sender: TObject);
begin
  vgCentroCusto.Confirmado := True;
  inherited;

end;

procedure TfrmCentroCustoPersonalizado.btnExcluirItemClick(Sender: TObject);
begin
  dtmLookupFinanceiro.ApagarCentroCusto;
end;

procedure TfrmCentroCustoPersonalizado.edtPorcentagemKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  inherited;
  if Key = 13 then
  begin
    btnAdicionarCentro.SetFocus;
    btnAdicionarCentroClick(self);
  end;
end;

procedure TfrmCentroCustoPersonalizado.FormActivate(Sender: TObject);
begin
  inherited;
  vgCentroCusto.Confirmado   := False;
  sqlCentroCustoItens.Active := False;
  sqlCentroCustoItens.DataSet.ParamByName('BALANCETE_GRUPO_ID').AsInteger := vgCentroCusto.BalanceteId;
  sqlCentroCustoItens.Active := True;
  lcbCentroCusto.SetFocus;
end;

procedure TfrmCentroCustoPersonalizado.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  if not vgCentroCusto.Cancelado then
    VerificarCentroCusto(0,0);

  Action := caFree;
  frmCentroCustoPersonalizado := nil;
  inherited;
end;

procedure TfrmCentroCustoPersonalizado.FormCreate(Sender: TObject);
begin
  sqlCentroCustoItens.Connection := dtmControles.DB;
  inherited;

end;

procedure TfrmCentroCustoPersonalizado.sqlCentroCustoItensAfterScroll(
  DataSet: TDataSet);
begin
  inherited;
  btnExcluirItem.Enabled := not dtmLookupFinanceiro.ClientCentroCustos.IsEmpty;
end;

procedure TfrmCentroCustoPersonalizado.VerificarCentroCusto(vpCentroCustoId : Integer; vpPercentual : Currency);
var
  viTotalPercentual : Currency;
begin
  with dtmLookupFinanceiro do
  begin
    ClientCentroCustos.DisableControls;
    ClientCentroCustos.First;
    viTotalPercentual := 0;

    while not ClientCentroCustos.Eof do
    begin
      if vpCentroCustoId <> 0 then
      begin
        if ClientCentroCustosCENTRO_CUSTO_ID.AsInteger = vpCentroCustoId then
        begin
          Application.MessageBox('Centro de Custo ja vinculado!!!', 'Atenção', mb_Ok + MB_ICONEXCLAMATION);
          lcbCentroCusto.SetFocus;
          ClientCentroCustos.EnableControls;
          Abort;
        end;
      end;

      viTotalPercentual := viTotalPercentual + ClientCentroCustosPORCENTAGEM.AsCurrency;
      ClientCentroCustos.Next;
    end;

    if vpCentroCustoId > 0 then
    begin
      if (viTotalPercentual+edtPorcentagem.EditValue) > 100 then
      begin
        Application.MessageBox('Percentual Total do Rateio não pode ser maior que 100%!!!', 'Atenção', MB_OK + MB_ICONWARNING);
        edtPorcentagem.SetFocus;
        exit;
      end;
    end
    else
    begin
      if (viTotalPercentual > 0) and (viTotalPercentual < 100) then
      begin
        Application.MessageBox(PChar('Rateio Total Centro de Custo esta menor que 100%.'), 'Atenção', MB_OK + MB_ICONWARNING);
        ClientCentroCustos.EnableControls;
        abort;
      end;
    end;

    ClientCentroCustos.EnableControls;
  end;

end;

end.
