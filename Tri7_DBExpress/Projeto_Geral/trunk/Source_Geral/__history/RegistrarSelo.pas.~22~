unit RegistrarSelo;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, CadAuxiliar, Menus, FMTBcd,
  cxDropDownEdit, cxLookupEdit,
  cxDBLookupEdit, cxDBLookupComboBox, cxMaskEdit, cxCalendar, cxTextEdit,
  cxControls, cxContainer, cxEdit, cxLabel, DB, DBClient, Provider, SqlExpr,
  StdCtrls, cxButtons, ExtCtrls,



  Vcl.ComCtrls, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, dxCore,
  cxDateUtils, DbxDevartInterBase, SimpleDS;

type
  TfrmSeloRegistrar = class(TfrmCadAuxiliar)
    cxLabel2: TcxLabel;
    cxLabel9: TcxLabel;
    cxLabel10: TcxLabel;
    cxLabel11: TcxLabel;
    cxLabel12: TcxLabel;
    cxLabel13: TcxLabel;
    cxLabel8: TcxLabel;
    cxLabel1: TcxLabel;
    edtSeloSigla: TcxTextEdit;
    edtSeloNumInicial: TcxTextEdit;
    edtQtd: TcxTextEdit;
    edtSeloNumFinal: TcxTextEdit;
    edtSeloData: TcxDateEdit;
    lcxSeloSituacao: TcxLookupComboBox;
    edtSeloDescricao: TcxTextEdit;
    edtSeloObservacao: TcxTextEdit;
    btnPesquisar: TcxButton;
    btnConfirmar: TcxButton;
    lbxUsuario: TcxLookupComboBox;
    lblUsuario: TcxLabel;
    sqlUsuarioSistema: TSimpleDataSet;
    sqlUsuarioSistemaUSUARIO_ID: TFMTBCDField;
    sqlUsuarioSistemaLOGIN: TStringField;
    dtsUsuarioSistema: TDataSource;
    procedure btnConfirmarClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure lcxSeloSituacaoPropertiesEditValueChanged(Sender: TObject);
    procedure edtQtdKeyPress(Sender: TObject; var Key: Char);
    procedure edtSeloNumInicialKeyPress(Sender: TObject; var Key: Char);
    procedure edtSeloNumFinalKeyPress(Sender: TObject; var Key: Char);
    procedure edtQtdExit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    vlLiberar : Boolean;
  public
    { Public declarations }
  end;

var
  frmSeloRegistrar: TfrmSeloRegistrar;

implementation

uses Controles, Rotinas, SeloLote, Lookup;

{$R *.dfm}

procedure TfrmSeloRegistrar.btnConfirmarClick(Sender: TObject);
var
  viData : String;
begin
  inherited;

  VerificarPreenchimentoEDT_TX(edtSeloNumInicial.Text, 'Número Inicial', edtSeloNumInicial);
  VerificarPreenchimentoEDT_TX(edtSeloNumFinal.Text, 'Número Final', edtSeloNumFinal);
  VerificarPreenchimentoDTA_TX(edtSeloData.Text, 'Data', edtSeloData);
  VerificarPreenchimentoLCX_TX(lcxSeloSituacao.Text, 'Situação', lcxSeloSituacao);

  if lcxSeloSituacao.EditValue = 6 then
    VerificarPreenchimentoLCX_TX(lbxUsuario.Text, 'Usuário', lbxUsuario);

  // **** Valida o Controle de Numeração
  if edtSeloNumInicial.EditingValue > edtSeloNumFinal.EditingValue then
  begin
    ShowMessage('Número Inicial não pode ser maior que o Número Final!!!');
    edtSeloNumInicial.SetFocus;
    exit;
  end;

  with frmCadSeloLote do
  begin
    // Verifica se a numeração desejada existe neste lote
    if not sqlSeloLivro.Locate('NUMERO', StrToInt(edtSeloNumInicial.Text), [loCaseInsensitive]) then
    begin
      ShowMessage('Número Inicial não existe neste lote!!');
      edtSeloNumInicial.SetFocus;
      exit;
    end;

    if not sqlSeloLivro.Locate('NUMERO', StrToInt(edtSeloNumFinal.Text), [loCaseInsensitive]) then
    begin
      ShowMessage('Número Final não existe neste lote!!');
      edtSeloNumFinal.SetFocus;
      exit;
    end;
  end;

  if Application.MessageBox(Pchar('Confirma registro do(s) selo(s) da sequência '+
                                   edtSeloNumInicial.Text +' a '+ edtSeloNumFinal.Text+'?'),'Confirmação', MB_ICONQUESTION + MB_YESNO) = IDNO then
    exit;

  if lcxSeloSituacao.EditValue > 1 then
       viData := QuotedStr(dtmControles.DataParaString(edtSeloData.EditValue))
  else viData := '';

  Screen.Cursor := crHourGlass;
  ExecutaSqlAuxiliar(' UPDATE G_SELO_LIVRO SET SELO_SITUACAO_ID = '+IntToStr(lcxSeloSituacao.EditingValue)+', '+
                     '                        DESCRICAO = '+QuotedStr(edtSeloDescricao.Text)+', '+
                     '                       OBSERVACAO = '+QuotedStr(edtSeloObservacao.Text)+', '+
                     '                       USUARIO_ID = '+vgUsuarioID +', '+
                     '                             DATA = '+ RetNull(viData) +', '+
                     '                           TABELA = NULL ' +', '+
                     '                         CAMPO_ID = NULL '+
                     ' WHERE SELO_LOTE_ID = '+frmCadSeloLote.ClientAncestralSELO_LOTE_ID.AsString +
                     '   AND NUMERO BETWEEN '+ edtSeloNumInicial.Text + ' AND '+ edtSeloNumFinal.Text,1);
  Screen.Cursor := crDefault;

  frmCadSeloLote.sqlSeloLivro.Refresh;
  frmCadSeloLote.sqlSeloLivro.Locate('NUMERO', StrToInt(edtSeloNumInicial.Text), [loCaseInsensitive]);
  close;
end;

procedure TfrmSeloRegistrar.edtQtdExit(Sender: TObject);
var
  viQtd, viNumeroInicial : Integer;
begin
  inherited;
  if trim(edtQtd.Text) = '' then
    edtQtd.EditValue := '1';
  viQtd := StrToInt(edtQtd.Text);
  
  if edtSeloNumInicial.Text = '' then
    edtSeloNumFinal.Text := ''
  else
  begin
    viNumeroInicial := StrToInt(edtSeloNumInicial.Text);
    edtSeloNumFinal.Text := FormatFloat('000000', (viNumeroInicial + viQtd-1));
  end;

  if StrToInt(edtSeloNumFinal.Text) > frmCadSeloLote.vgSeloUltimo then
  begin
    ShowMessage('Quantidade insuficiente para este Lote!!!');
    edtQtd.SetFocus;
  end;

  if (viQtd > (frmCadSeloLote.vgSeloDisponivel+frmCadSeloLote.vgSeloReservado+frmCadSeloLote.vgSeloUsuario)) and not vlLiberar then
  begin
    ShowMessage('A quantidade máxima disponível neste lote é '+ IntToStr(frmCadSeloLote.vgSeloDisponivel));
    edtQtd.SetFocus;
  end;

end;

procedure TfrmSeloRegistrar.edtQtdKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  DigitaInteiro(Key);
end;

procedure TfrmSeloRegistrar.edtSeloNumFinalKeyPress(Sender: TObject;
  var Key: Char);
begin
  inherited;
  DigitaInteiro(Key);
end;

procedure TfrmSeloRegistrar.edtSeloNumInicialKeyPress(Sender: TObject;
  var Key: Char);
begin
  inherited;
  DigitaInteiro(Key);
end;

procedure TfrmSeloRegistrar.FormActivate(Sender: TObject);

  procedure VerificarDisponibilidadeSelo;
  begin
    if frmCadSeloLote.vgSeloDisponivel = 0 then
    begin
      edtQtd.EditValue := 1;
      edtQtd.Enabled   := False;
      vlLiberar        := True;
      edtQtdExit(Self);
    end
    else vlLiberar := False;
  end;

begin
  inherited;
  edtSeloSigla.Clear;
  edtSeloNumInicial.Clear;
  edtSeloNumFinal.Clear;
  edtSeloData.Date := dtmControles.DataHoraBanco(3);
  lcxSeloSituacao.Clear;
  edtSeloDescricao.Clear;
  edtSeloObservacao.Clear;

  with frmCadSeloLote do
  begin
    if not frmCadSeloLote.chxProximoSelo.Checked then
    begin
      edtSeloNumInicial.Text      := FormatFloat('000000', sqlSeloLivroNUMERO.AsCurrency);
      lcxSeloSituacao.EditValue   := sqlSeloLivroSELO_SITUACAO_ID.AsInteger;
      edtSeloDescricao.EditValue  := sqlSeloLivroDESCRICAO.AsString;
      edtSeloObservacao.EditValue := sqlSeloLivroOBSERVACAO.AsString;
      if not sqlSeloLivroDATA.IsNull then
           edtSeloData.EditValue := sqlSeloLivroDATA.AsDateTime
      else edtSeloData.EditValue := dtmControles.DataHoraBanco(3);
    end
    else
    begin
      edtSeloNumInicial.Text    := FormatFloat('000000', vgSeloProximo);
      edtSeloData.EditValue     := dtmControles.DataHoraBanco(3);
      lcxSeloSituacao.EditValue := 2;
    end;

    edtSeloSigla.EditValue := ClientAncestralSIGLA.AsString;
  end;

  lcxSeloSituacaoPropertiesEditValueChanged(Self);
  lcxSeloSituacao.Properties.ListSource := frmCadSeloLote.dtsSeloSituacao;
  lcxSeloSituacaoPropertiesEditValueChanged(lcxSeloSituacao);
  VerificarDisponibilidadeSelo;
  if vlLiberar then
       edtSeloData.SetFocus
  else edtQtd.SetFocus;
end;

procedure TfrmSeloRegistrar.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  Action := caFree;
  frmSeloRegistrar := nil;
end;

procedure TfrmSeloRegistrar.FormCreate(Sender: TObject);
begin
  inherited;
  sqlUsuarioSistema.Connection := dtmControles.DB;
end;

procedure TfrmSeloRegistrar.lcxSeloSituacaoPropertiesEditValueChanged(
  Sender: TObject);
begin
  inherited;
  edtSeloDescricao.Enabled  := lcxSeloSituacao.EditValue > 1;
  edtSeloObservacao.Enabled := lcxSeloSituacao.EditValue > 1;
  lbxUsuario.Enabled        := lcxSeloSituacao.EditValue = 6;
  lblUsuario.Enabled        := lcxSeloSituacao.EditValue = 6;

  if lcxSeloSituacao.EditValue < 6 then
    lbxUsuario.EditValue := null;

  if lcxSeloSituacao.EditValue = 1 then
  begin
    edtSeloDescricao.Clear;
    edtSeloObservacao.Clear;
  end;

end;

end.
