unit CadEnvioEmail;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,  Menus, FMTBcd,
  DB, DBClient, Provider, SqlExpr, StdCtrls, cxButtons, cxTextEdit, cxDBEdit,
  cxCheckBox, cxContainer, cxEdit, cxLabel, ExtCtrls, cxPC, cxControls,
  cxMaskEdit, cxSpinEdit, cxRadioGroup, OleCtrls,
  CHILKATMAILLib2_TLB, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters,
  dxBarBuiltInMenu, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit,
  cxDBLookupComboBox, Vcl.ComCtrls, WPCTRRich, DbxDevartInterBase, SimpleDS;

type
  TfrmCadEnvioEmail = class(TForm)
    pgcConfig: TcxPageControl;
    tabConexao: TcxTabSheet;
    Panel2: TPanel;
    cxLabel3: TcxLabel;
    cxLabel1: TcxLabel;
    cxLabel2: TcxLabel;
    cxLabel4: TcxLabel;
    cxLabel5: TcxLabel;
    cxLabel6: TcxLabel;
    chxAutenticar: TcxDBCheckBox;
    chxEmailPadrao: TcxDBCheckBox;
    edtHostSMTP: TcxDBTextEdit;
    edtUsuario: TcxDBTextEdit;
    edtSenha: TcxDBTextEdit;
    edtEmailPadrao: TcxDBTextEdit;
    cxDBTextEdit2: TcxDBTextEdit;
    tabTextoPadrao: TcxTabSheet;
    Panel3: TPanel;
    tabRodape: TcxTabSheet;
    memTextoRodape: TMemo;
    Panel1: TPanel;
    DataSetAncestral: TSQLDataSet;
    ProviderAncestral: TDataSetProvider;
    ClientAncestral: TClientDataSet;
    ClientAncestralEMAIL_CONFIG_ID: TFMTBCDField;
    ClientAncestralTEXTO_EMAIL: TBlobField;
    ClientAncestralHOST_SMTP: TStringField;
    ClientAncestralUSER_NAME: TStringField;
    ClientAncestralAUTENTICAR_SERVIDOR: TStringField;
    ClientAncestralASSUNTO_PADRAO: TStringField;
    ClientAncestralEMAIL_PADRAO: TStringField;
    ClientAncestralUSAR_EMAIL_USUARIO: TStringField;
    SourceAncestral: TDataSource;
    Panel4: TPanel;
    cxLabel7: TcxLabel;
    pnlEnvio: TPanel;
    ClientAncestralTEXTO_RODAPE: TBlobField;
    ClientAncestralESPACO_TEXTO_RODAPE: TFMTBCDField;
    ClientAncestralADICIONAR_ASSINATURA_USUARIO: TStringField;
    chxAssinaturaUsuario: TcxDBCheckBox;
    lblEnviando: TcxLabel;
    edtLinhas: TcxSpinEdit;
    cxLabel8: TcxLabel;
    chxCC: TcxCheckBox;
    edtPorta: TcxDBTextEdit;
    ClientAncestralPASSWORD: TStringField;
    edtAssuntoEmail: TcxTextEdit;
    edtCC: TcxTextEdit;
    btnEnviar: TcxButton;
    btnConfirmar: TcxButton;
    btnCancelar: TcxButton;
    Panel5: TPanel;
    cxLabel9: TcxLabel;
    brnLimparProtocolo: TcxButton;
    lcxEmailTextoPadrao: TcxLookupComboBox;
    memTextoPadrao: TRichEdit;
    cbxAnexarArquivo: TcxCheckBox;
    dtsAtoAcompanhamento: TDataSource;
    sqlAtoAcompanhamento: TSimpleDataSet;
    sqlAtoAcompanhamentoATO_ACOMPANHAMENTO_ID: TFMTBCDField;
    sqlAtoAcompanhamentoDATA: TSQLTimeStampField;
    sqlAtoAcompanhamentoHORA: TSQLTimeStampField;
    sqlAtoAcompanhamentoCONTATO: TStringField;
    sqlAtoAcompanhamentoOBSERVACAO: TStringField;
    sqlAtoAcompanhamentoTIPO_CONTATO: TStringField;
    sqlAtoAcompanhamentoUSUARIO_ID: TFMTBCDField;
    sqlAtoAcompanhamentoATO_ID: TFMTBCDField;
    procedure btnConfirmarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure pgcConfigChange(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure chxAutenticarClick(Sender: TObject);
    procedure chxEmailPadraoClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnEnviarClick(Sender: TObject);
    procedure chxCCClick(Sender: TObject);
    procedure lcxEmailTextoPadraoPropertiesChange(Sender: TObject);
    procedure InserirAcompanhamento;
  private
    vgNovo : Boolean;
    procedure SendMail(vBodyHtml : String; vEmailCC: string; vAttachment: String; vAnexo: TStrings);
  public
    { Public declarations }
  end;

var
  frmCadEnvioEmail: TfrmCadEnvioEmail;
  vgEnviarEmail : Boolean;

implementation

uses Controles, Lookup, Rotinas;

{$R *.dfm}

procedure TfrmCadEnvioEmail.btnCancelarClick(Sender: TObject);
begin
  if vgEnviarEmail then
    ClientAncestral.CancelUpdates
  else
  begin
    FreeAndNil(vgEmailConfig.TextoEmail);
    FreeAndNil(vgEmailConfig.TextoRodape);
  end;
  Close;
end;

procedure TfrmCadEnvioEmail.btnConfirmarClick(Sender: TObject);
begin
  if vgNovo then
    ClientAncestralEMAIL_CONFIG_ID.AsCurrency := dtmControles.GerarSequencia('T_CONFIG_EMAIL');

  ClientAncestralTEXTO_RODAPE.AsString := Trim(memTextoRodape.Text);
  ClientAncestralTEXTO_EMAIL.AsString  := Trim(memTextoPadrao.Text);
  ClientAncestralESPACO_TEXTO_RODAPE.AsInteger := edtLinhas.EditValue;
  ClientAncestral.ApplyUpdates(-1);
  Close;
end;

procedure TfrmCadEnvioEmail.btnEnviarClick(Sender: TObject);
var
  vlAttachmentFile : String;
begin
  VerificarPreenchimentoEDT_TX(edtAssuntoEmail.Text, 'Assunto', edtAssuntoEmail);

  if Application.MessageBox('Confirma o envio do email?','Pergunta', mb_IconQuestion + mb_YesNo) = idNo then
    exit;

  lblEnviando.Visible := True;
  frmCadEnvioEmail.Refresh;

  ConverterWptoolsHtml(memTextoPadrao, memTextoRodape.Lines);

  vlAttachmentFile := '';
  if cbxAnexarArquivo.Checked then
    vlAttachmentFile := 'c:\temp\AtoRascunho.pdf';

  dtmControles.EnviarEmailIndy(vgEmailConfig.EmailEnvio, edtAssuntoEmail.Text, vgEmailConfig.EmailDestino,
                               'c:\Temp\Body.html', edtCC.Text,vlAttachmentFile,nil);
  if vgEmailConfig.Transmitido then
  begin
    Application.MessageBox('Email Transmitido com sucesso!!!', 'Informação', MB_ICONINFORMATION + MB_OK);
    InserirAcompanhamento;
  end
  else Application.MessageBox(PChar('Erro nao Transmir o email!!!'+#13+#13+
                                    'Verifique a Conexão coma Internet e/ou Dados do email.'), 'Informação', MB_ICONINFORMATION + MB_OK);
  close;
end;

procedure TfrmCadEnvioEmail.chxAutenticarClick(Sender: TObject);
begin
  edtPorta.Enabled := chxAutenticar.Checked;
end;

procedure TfrmCadEnvioEmail.chxCCClick(Sender: TObject);
begin
  edtCC.Enabled := chxCC.Checked;
  if chxCC.Checked then
    edtCC.EditValue := vgEmailConfig.EmailEnvio;

end;

procedure TfrmCadEnvioEmail.chxEmailPadraoClick(Sender: TObject);
begin
  edtEmailPadrao.Enabled := not chxEmailPadrao.Checked;
end;

procedure TfrmCadEnvioEmail.FormActivate(Sender: TObject);
begin
  if not vgEnviarEmail then
  begin
    pgcConfig.ActivePageIndex := 0;
    chxAutenticarClick(Self);
    chxEmailPadraoClick(Self);
    edtHostSMTP.SetFocus;
  end
  else
  begin
    tabConexao.TabVisible := False;
    pgcConfig.ActivePage  := tabTextoPadrao;
    pgcConfigChange(Self);
  end;
  vgEnviarEmail := False;
end;

procedure TfrmCadEnvioEmail.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action := caFree;
  frmCadEnvioEmail := nil;
end;

procedure TfrmCadEnvioEmail.FormCreate(Sender: TObject);
var
  vpUsuario : TStringList;
begin
  sqlAtoAcompanhamento.Connection := dtmControles.DB;
  sqlAtoAcompanhamento.Active     := True;

  btnEnviar.Visible             := vgEnviarEmail;
  pnlEnvio.Visible              := vgEnviarEmail;
  edtAssuntoEmail.Visible       := vgEnviarEmail;
  edtCC.Visible                 := vgEnviarEmail;
  btnConfirmar.Visible          := not vgEnviarEmail;
  chxAssinaturaUsuario.Visible  := not vgEnviarEmail;

  ClientAncestral.Open;

  if not vgEnviarEmail then
  begin
    vgNovo         := ClientAncestral.IsEmpty;
    pnlEnvio.Color := clSilver;
    if ClientAncestral.IsEmpty then
    begin
      ClientAncestral.Insert;
      ClientAncestralAUTENTICAR_SERVIDOR.AsString  := 'N';
      ClientAncestralUSAR_EMAIL_USUARIO.AsString   := 'N';
      edtLinhas.EditValue := 1;
      memTextoPadrao.Lines.Clear;
    end
    else
    begin
      ClientAncestral.Edit;
      memTextoRodape.Text  := ClientAncestralTEXTO_RODAPE.AsString;
      memTextoPadrao.Text  := ClientAncestralTEXTO_EMAIL.AsString;
      edtLinhas.EditValue  := ClientAncestralESPACO_TEXTO_RODAPE.AsInteger;
    end;
  end
  else
  begin
    dtmLookup.LerDadadosConfigEmail(vgEmailConfig.Tabela);
    memTextoPadrao.Text       := vgEmailConfig.TextoEmail.Text;
    edtLinhas.EditValue       := vgEmailConfig.EspacoAssinatura;
    edtAssuntoEmail.EditValue := vgEmailConfig.AssuntoPadrao;

    vpUsuario := dtmControles.GetFields(' SELECT EMAIL, NOME_COMPLETO, FUNCAO FROM G_USUARIO WHERE USUARIO_ID = '+vgUsuarioID);
    vgEmailConfig.EmailEnvio := vpUsuario.Values['EMAIL'];
    if vgEmailConfig.EmailEnvio = '' then
      vgEmailConfig.EmailEnvio := ClientAncestralEMAIL_PADRAO.AsString;

    if vgEmailConfig.EmailEnvio = '' then
    begin
      Application.MessageBox(PChar('Email do usuário e/ou padrão não configurado!!!'+#13+#13+
                                   'Opção de envio desativada.'),'Informação', MB_ICONINFORMATION + MB_OK);
      btnEnviar.Enabled := False;
      exit;
    end;

    if vgEmailConfig.AdAssinaturaUsuario then
    begin
      memTextoRodape.Lines.Add(MaiusculoMinusculo(vpUsuario.Values['NOME_COMPLETO']));
      memTextoRodape.Lines.Add(MaiusculoMinusculo(vpUsuario.Values['FUNCAO']));
      memTextoRodape.Text := memTextoRodape.Text + vgEmailConfig.TextoRodape.Text;
    end
    else memTextoRodape.Text := vgEmailConfig.TextoRodape.Text;
  end;
end;

procedure TfrmCadEnvioEmail.InserirAcompanhamento;
begin

  sqlAtoAcompanhamento.Insert;
  sqlAtoAcompanhamentoATO_ACOMPANHAMENTO_ID.AsInteger := dtmControles.GerarSequencia('T_ATO_ACOMPANHAMENTO');
  sqlAtoAcompanhamentoATO_ID.AsInteger                := vgEmailConfig.ChaveId ;
  sqlAtoAcompanhamentoDATA.AsString                   := dtmControles.DataHoraBanco(4);
  sqlAtoAcompanhamentoHORA.AsString                   := dtmControles.DataHoraBanco(2);
  sqlAtoAcompanhamentoCONTATO.AsString                := vgEmailConfig.DadosEmail[1,1];
  sqlAtoAcompanhamentoTIPO_CONTATO.AsString           := '5';
  sqlAtoAcompanhamentoOBSERVACAO.AsString             := edtAssuntoEmail.Text + ' - ' + vgEmailConfig.EmailDestino;
  if cbxAnexarArquivo.Checked then
    sqlAtoAcompanhamentoOBSERVACAO.AsString := sqlAtoAcompanhamentoOBSERVACAO.AsString +
                                               ' * Encaminhado também o Arquivo com o Rascunho do Ato';
  sqlAtoAcompanhamentoUSUARIO_ID.AsString             := vgUsuarioID;
  sqlAtoAcompanhamento.Post;
  sqlAtoAcompanhamento.ApplyUpdates(-1);
end;

procedure TfrmCadEnvioEmail.lcxEmailTextoPadraoPropertiesChange(
  Sender: TObject);
var
  viWptAuxiliar : TWPRichText;
begin
  viWptAuxiliar := TWPRichText.Create(nil);
  viWptAuxiliar.AsString := DeCompressString(dtmLookup.sqlEmailTextoPadraoTEXTO.AsString);
  viWptAuxiliar.CopyToClipboard(true);

  memTextoPadrao.Clear;
  memTextoPadrao.PasteFromClipboard;
  edtAssuntoEmail.Text := dtmLookup.sqlEmailTextoPadraoASSUNTO.AsString;
  FreeAndNil(viWptAuxiliar);
end;

procedure TfrmCadEnvioEmail.pgcConfigChange(Sender: TObject);
begin
  if pgcConfig.ActivePage = tabConexao then
    edtHostSMTP.SetFocus
  else
    if pgcConfig.ActivePage = tabTextoPadrao then
         memTextoPadrao.SetFocus
    else memTextoRodape.SetFocus;

end;

procedure TfrmCadEnvioEmail.SendMail(vBodyHtml, vEmailCC, vAttachment: String;
  vAnexo: TStrings);
var
  mailman: TChilkatMailMan2;
  success: Integer;
  email  : CHILKATMAILLib2_TLB.IChilkatEmail2;

  Procedure AddEmail(vpLista : String);
  var
    viPos : Integer;
  begin
    repeat
      viPos := pos(';', vpLista);
      if viPos > 0 then
        email.AddTo('', Copy(vpLista,1,viPos-1))
      else
      begin
        email.AddTo('', vpLista);
        vpLista := '';
      end;
      Delete(vpLista,1,viPos);
    until vpLista = '';
  end;

begin
  //  The mailman object is used for sending and receiving email.
  mailman := TChilkatMailMan2.Create(Self);

  //  Any string argument automatically begins the 30-day trial.
  success := mailman.UnlockComponent('MAIL12345678_1D8C95A8G82H');
  if (success <> 1) then
  begin
    Screen.Cursor := crDefault;
    ShowMessage('Component unlock failed');
    exit;
  end;

  //  Set the SMTP server.
  mailman.SmtpHost     := vgEmailConfig.HostSmtp;
  mailman.SmtpUsername := vgEmailConfig.UserName;
  mailman.SmtpPassword := vgEmailConfig.PassWord;
  mailman.SmtpSsl      := 1;
  mailman.SmtpPort     := StrToInt(vgEmailConfig.Porta);

  //  Create a new email object
  email := CoChilkatEmail2.Create();

  email.Subject := vgEmailConfig.AssuntoPadrao;
  email.SetHtmlBody(vBodyHtml);
  email.From    := vgEmailConfig.EmailEnvio;
  AddEmail(vgEmailConfig.EmailDestino);
  email.AddCC('',vEmailCC);

  if vAttachment <> '' then
    email.AddFileAttachment2(vAttachment, 'application/pdf');

  success := mailman.SendEmail(email As CHILKATMAILLib2_TLB.IChilkatEmail2);
  if (success <> 1) then
  begin
    Screen.Cursor := crDefault;
    ShowMessage(mailman.LastErrorText);
    Abort;
  end;

  success := mailman.CloseSmtpConnection();
  if (success <> 1) then
  begin
    Screen.Cursor := crDefault;
    ShowMessage('Connection to SMTP server not closed cleanly.');
  end;
end;

end.
